[ { "title": "C언어 문법정리 3", "url": "/posts/C%EC%96%B8%EC%96%B4-%EA%B8%B0%EC%B4%883/", "categories": "c언어", "tags": "충북대 공동훈련센터, 실습수업, 개발자 과정", "date": "2022-06-21 16:34:00 +0800", "snippet": "C언어 강의내용 정리 텍스트 파일에 테이터 읽고 쓰기 printf 함수를 사용하여 파일에 “Hello” 문자열에 저장하기 fopen 함수에서 파일 사용 형식에 “W”가 있을 경우에 첫 번째 매개변수로 넘겨준 파일(tipssoft.txt)파일이 없으면 파일을 만들어서 사용하고 파일이 존재하면 덮어쓰기를 한다. 파일에 문자열을 출력한다는 것은 문자열을 저장한다는 뜻과 같다. fprintf 함수의 f는 file을 의미한다.** tipssoft.txt파일의 경로 비주얼 코드의 솔루션 탐색기 -&gt; 솔루션에서 오른쪽 마우스 클릭 -&gt; 파일탐색기에서 폴더열기 클릭 -&gt; 데이터를 저장한 파일이 나오고 솔루션 파일을 선택하고 그 안에 텍스트 파일을 붙혀넣기 한다.-fprintf 함수에 Hello 라고 쓴 문자가 텍스트에 저장 된다. fscanf 함수로 문자열 형식의 정수 값 모두 읽어오기 tipssoft.txt 파일에 있는 모든 숫자를 다 출력하도록 수정 읽기모드로 텍스트 파일을 오픈함 파일열기에 성공한 경우 파일에서 읽은 숫자 값을 화면에 출력 tipssoft 메모장에 숫자를 입력한다. 콘솔로 tipssoft 메모장에 숫자를 읽은 결과솔루션 파일 안에 있는 tipssoft.txt 파일에 숫자를 쓰고 저장, 콘솔로 텍스트 파일에 저장되어있던 숫자를 출력 fgets 함수로 문자열을 줄단위로 모두 읽어오기 fscanf 함수는 문자열 사이에 공백이 있기 때문에 한 줄 단위로 입력 받지 못하고 단어 단위로 파일에서 읽어온다. 따라서 텍스트 파일에서 한 줄 단위로 문자열을 처리하고 싶은 경우에 fgets 함수를 사용한다. 이 함수는 gets 함수와 비슷하며 함수의 세 번째 매개변수에ㅔ 어떤 파일에서 입력 값을 가져올 것인지 파일 포인터를 표기하면 된다. fgets 함수로 문자열을 줄 단위로 모두 읽어오기 fscanf 함수는 줄바꿈뿐만 아니라 공백 문자 입력도 구별한다. fgets 함수는 입력의 구분을 줄 바꿈으로만 판단하기 때문에 파일에 저장된 문자열을 한 줄 단위로 읽어 온다. fscanf 함수는 EOF 문자를 만나면 EOF를 반환하지만 fgets함수는 EOF 문자를 만나면 NULL을 반환한다. fscanf 함수는 읽은 문자열에서 \\n을 제외하는데 fgets함수는 \\n 문자열에 포함한다는 것이 다르다. 바이너리 파일에 데이터 저장하기 : fwrite 함수 바이너리 속성으로 데이터를 읽거나 쓰려면 반드시 프로그래머가 직접 크기를 적어주어야 한다. 바이너리와 관련된 파일 입출력 함수는 대부분 데이터 크기를 적도록 되어 있다. fwrite 함수는 다음과 같은 형식으로 호출해서 데이터를 저장한다. 함수 원형 : size_t fwrite(const void *buffer, size_t size, size_t count, FILE *stream); 사용 형식 : fwrite(저장할 데이터의 시작 주소, 저장할 데이터의 기준 단위 크기, 반복횟수, 파일 포인터); “wb” 쓰기모드로 바이너리 파일을 오픈함 fwrite 함수로 바이너리 파일에 순차적으로 값 저장 fwrite 함수로 바이너리 파일만들어짐 fread 함수를 사용하여 바이너리 파일의 값 읽기 바이너리 파일은 텍스트 파일로 열었을 때 읽을 수 없는 문자로 나옴. 콘솔로 읽을 수 있다. fread 함수를 사용하여 tipssoft.dat 파일 값을 읽을 수 있다. 콘솔로 tipssoft.dat 파일의 값을 확인한 결과이다." }, { "title": "java 문법정리 1", "url": "/posts/java0614/", "categories": "java", "tags": "충북대 공동훈련센터, 실습수업, 개발자 과정", "date": "2022-06-15 16:34:00 +0800", "snippet": "자바 수업 내용 정리 자바프로그램의 기본 구조 클래스 만들기가 가장 기본적이다. 클래스를 만들고, 그 안에 변수, 상수, 함수(메소드) 등 모든 프로그램 요소를 작성 main() 메소드 자바 프로그램은 메인 메소드에서부터 실행을 시작한다.*main()은 반드시 public, static, void 타입으로 선언되어야 하며, 한 클래스에 2개 이상의 main()을 작성하면 안된다.**자바 프로그램의 기본구조**자바 프로그램의 기본구조 실행 결과 좋은 이름을 붙이는 관습 자바는 변수의 이름을 정하는 것이 아주 중요하다. 이름의 길이에 연연하지 말고 충분히 긴 이름으로 붙이는 것이 좋다. 카멜표기법 사용ex) AVM -&gt; X, AutoVendingMachine -&gt; O-클래스의 이름의 첫 번째 문자는 대문자로 시작하고, 여러 단어가 복합되면 각 단어의 첫 번째 문자만 대문자로 표시 변수, 메소드 이름 변수와 메소드 이름은 첫단어만 소문자로 표기, 이후 각 단어의 첫번째 문자만 대문자로 표기한다.ex) int myAge; 상수 이름 상수 이름은 전체를 대문자로 표기하도록 권장한다.ex) final double PI = 3.141592; 자바의 데이터 타입 데이터 타입이란 자바에서 다룰 수 있는 데이터의 종류를 말한다. 기본 타입은 8가지로 고정이며, 그외엔 레퍼런스 타입이다. 모두 소문자로 이루어져있다.*논리형 boolean : 1 byte. 논리값 true 혹은 false를 저장하는 변수형. 초기값 false.*문자형 char : 2 byte. 문자를 저장. 초기값은 ‘\\u0000’, C에서는 1 byte, 자바는 유니코드를 사용하므로 2 byte.*정수형 byte : 1 byte. 이진 데이터를 다룰 때 주로 사용. 초기값 0. short : 2 byte. C 언어와의 호환을 위해 추가된 변수형. 초기값 0. int : 4 byte. 32 bit 환경에서 기본형으로 사용된다. -2^31 ~ 2^31 -1의 범위. 초기값 0. long : 8 byt e. 다룰 수 있는 정수의 범위가 가장 넓다. 초기값 0L. 32 bit 멀티스레드 웹 애플리케이션 환경에서 transaction의 문제가 있을 수 있다.*실수형 float : 4 byte. int와 마찬가지로 32 bit 환경에서 기본형이다. 초기값 0.0f    double : 8 byte. float의 두 배의 크기, 두 배의 정밀도. 초기값 0.0d 출처: https://coderbycode.tistory.com/6 [workSpace:티스토리] 레퍼런스 타입은 c언어, c++의 포인터와 비슷한 개념이다. 그러나 c언어, c++와 달리 실제 주소값을 가지지 않는다. *어려운 개념이므로 많이 공부 해보기 변수, 리터럴, 상수 활용 리터럴이란 프로그램에 직접 표현한 값을 말한다. 정수, 실수, 문자, 논리, 문자열 타입 모두 리터럴이 있다. 상수은 변하지 않는 값, 변수는 변하는 값을 의미**상수 IP(읽기전용)를 선언하고 원의 면적을 구하는 프로그램을 작성하는 프로그램이다. 원주율을 상수로 선언 원의 반지름 원의 면적 계산 원의 면적을 화면에 출력한다.**원의 면적을 구하여 출력한 값 타입 변환 타입 변환이란 변수나 혹은 리터럴의 타입을 다른 타입으로 바꾸는 것을 말한다.**자동 타입 변환과 장제 타입 변환이 들어있는 코드의 실행결과 이다.**타입변환을 실행하고 출력한 값 inport 문 사용 Scanner를 사용하기 위해서는 프로그램의 맨 앞줄에 import 문이 필요하다. (c언어의 include 역할을 함)ex) import java.util.Scanner; import 문이 없으면 자바 컴파일러가 Scanner 클래스의 코드가 어디에 있는지 찾을 수 없다.**Scanner 클래스로 이름, 도시, 나이, 체중, 독신 여부를 입력받고 다시 출력하는 프로그램을 작성**Scanner를 이용한 키 입력 값이다. 콘솔에 직접 키를 입력한다. 조건 연산 조건 연산자는 3개의 피연산자로 구성되어 삼항(ternare) 연산자라고도 한다.ex) condition ? opr2 : opr3 앞의 식에서 조건문(condition)이 true이면 위 식의 결과 값은 opr2의 값이 되고, false이면 opr3의 값이 된다. opr2나 opr3은 식이 될 수도 있고 값이 될수도 있다.ex) int x = 5; int y = 3; int s = (x&gt;y)?1:-1 *x가 y보다 크기 때문에 1이 s에 대입된다. while문 while문을 이용하여 -1이 입력될 때가지 정수를 계속 입력받아 합을 구하고 평균을 출력하는 프로그램이다. -1이 입력 될 때까지 입력된 수의 평균 값이다." }, { "title": "C언어 문법정리 2", "url": "/posts/C%EC%96%B8%EC%96%B4-%EA%B8%B0%EC%B4%882/", "categories": "c언어", "tags": "충북대 공동훈련센터, 실습수업, 개발자 과정", "date": "2022-06-07 16:34:00 +0800", "snippet": "C언어 문법정리 2차원 포인터 2차원 포인터는 * 키워드를 두 개 사용해서 선언한다. 2차원 포인터는 1차원 포인터의 주소 값을 저장한다.**2차원 포인터 사용하여 일반 변수의 값 대입**2차원 포인터 일반변수 대입 값 2차원 포인터와 함수의 매개변수**2차원 포인터로 8바이트 동적 메모리를 할당하는 함수 만들기-free함수로 할당된 동적 메모리를 해체 한 뒤, p :NULL 값을 넣어줘야 프로그램이 죽지 않는다. 2차원 포인터와 2차원 배열 포인터는 배열과 유사하지만 같지는 않다. 포인터가 더 넓은 범위를 가지고 있다.**2차원 포인터로 연령별 윗몸일으키기 횟수 관리하기**2차원 포인터로 연령별 윗몸일으키기 횟수 구한 값 dypedef 문법 기존의 자료형 중에 자료형 이름의 길이가 긴 경우 프로그래머가 짧고 간결하게 자료형을 재정의 하는 문법 기존의 자료형을 다른 이름을 새롭게 재정의 한다. dypedef 키워드를 뺀 나머지 부분이 변수를 선언하는 형태와 같다는 특징이 있어서 변수 선언과 착각하지 않도록 자료형의 이름을 대문자로 적는 경우가 많다.**typedef로 정의한 자료형으로 변수 선언**typedef로 정의한 자료형으로 변수 선언 값 구조체로 선언한 변수의 요소 사용하기 구조체로 묶인 데이터는 각 요소의 크기가 같지 않기 때문에 사용할 요소의 이름을 직접 지어 주어야 한다.\\ 구조체로 선언한 변수는 .(요소지정) 연산자와 자신이 사용할 요소의 이름을 함께 적어서 사용한다.ex) 구조체 변수 이름.사용할 요소**구조체를 사용해서 사람의 신체 정보를 입력 받고 출력하기**구조체를 사용해서 사람의 신체 정보를 입력 받고 출력한 값 구조체로 선언한 변수를 포인터로 사용하기구조체 내부 요소에 접근 하려면 *(주소지정) 연산자를 사용해서 data 변수의 주소로 이동한 다음 .(요소지정) 연산자를 사용해야 한다. 그런데 * 연산자가 .연산자보다 우선 순위가 낮아서 *p.age=23; 처럼 사용하면 오류가 발생한다. 따라서 *연산자가 먼저 수행되도록 괄호()를 사용해서 (p).age = 23; 형태로 명령문을 구성해야 한다. 연산자 우선순위 문제를 해결하는 -&gt; 연산자구조체로 선언한 변수를 포인터 문법으로 사용할 때 마다 (p) 형태를 사용한다면 매우 불편하다*이러한 문제를 해결할 수 있는 -&gt; 연산자는 *연산자와 .연산자를 각각 사용하지 않고 하나의 연산자로 사용하기 때문에 연산자 우선순위 문제가 자연스럽게 해결된다.ex) (*p).age = 23; = p -&gt;age = 23; 구조체를 활용한 연결리스트 연결리스트는 데이터를 저장할 때 데이터의 개수를 예상 할 수 없고 그 범위가 너무 넓을 때 사용한다. 프로그램에서 사용할 데이터 저장 공간을 낭비하지 않을 수 있다. 연결리스트의 노드를 구조체로 선언하기 연결 리스트에서 숫자와 포인터를 함께 저장하기 위해 할당한 메모리를 노드(Node)라고 부른다.*연결리스트로 더하기 프로그램 만들기**사용자에게 숫자를 입력 받아 합산해 출력**사용자에게 숫자를 입력받아 합산해 출력한 값" }, { "title": "C언어 문법정리 1", "url": "/posts/C%EC%96%B8%EC%96%B4-%EA%B8%B0%EC%B4%88-1/", "categories": "c언어", "tags": "충북대 공동훈련센터, 실습수업, 개발자 과정", "date": "2022-06-07 16:34:00 +0800", "snippet": "C언어 문법정리 gets함수 getchar함수와 달리 gets함수는 한번에 여러개의 문자를 입력 받을 수 있으며 엔터키를 입력 할 때 까지 입력한 모든 문자를 하나의 문자열로 간주한다. gets함수는 사용자 입력이 정상적으로 완료되지 않았다면 ‘해당하는 메모리 주소가 없음’을 의미하는 널(NULL)값을 반환하고, 성공적으로 입력했다면 input_data 배열의 주소를 반환한다.**함수로 문자열 입력 받기**gets 함수로 문자열 입력 받을 떄 입력 취소까지 처리**gets 정상적 입력 받았을 때**Ctrl+c 눌러 입력 취소 했을 때**문자열을 입력 받을 때 키 입력 횟수 제한하기**입력횟수를 정상 입렵했을 때**입력 횟수의 범위를 초과했을 때 atoi 함수 atoi 함수는 문자열을 정수로 변환 시켜주는 함수이다. #include -&gt; stdlib.h 파일에 함수의 원형이 정의되어 있으므로 이 함수를 사용하려면 stdlib.h 파일을 해당 소스 파일에 include 해야 한다.**atoi 함수를 사용하여 두 개의 숫자를 입력 받아 합산**atoi 함수의 결과화면 표준 입력 함수 scanf scanf함수는 한번의 함수 호출로 여러 개의 값을 입력 받을 수 있도록 만들어졌기 때문에 포인터가 꼭 필요하다. scanf는 포인터 기술을 사용하여 값을 반환한다. &amp;연산자를 사용하여 사용자가 입력한 값을 저장할 변수의 주소를 넘겨주면 scanf함수는 해당 주소를 사용하여 입력 형식 키워드(%d, %f, ‘’‘)에 맞게 입력 값을 해당 변수에 넣어 준다. scanf함수도 표준입력 함수이기 때문에 엔터기를 눌러야 입력이 끝난다. 사용자가 입력하는 문자열에 공백이 포함된다면 scanf 대신 gets함수를 사용하는 것이 더 좋다. scanf함수는 입력 형식 키워드와 자료형이 일치해야 한다.**공백문자로 구분해서 scanf함수로 8, 10, 16 진수 입력받기**공백문자로 구분해서 scanf함수로 8, 10, 16 진수 입력 받은것 배열을 사용하는 포인터 *p -&gt; 포인터가 가리키는 주소의 공간(내용) char(문자형 타입이며 1bite의 용량을 가짐) p+ -&gt; 지금 갖고 있는 값에 1 더하기 p+1 -&gt; char type의 크기 * 1, 같은 말로 p++**포인터를 사용하여 배열의 각 요소에 저장된 값 합산**포인터를 사용한 배열의 합산 값 동적 메모리 할당 및 해제 (malloc 함수) 동적 메모리 할당을 지원하는 C표준 함수인 malloc을 사용해서 메모리를 할당해야 한다.*함수원형 : void *malloc(size_t size); -&gt; size_t는 unsigned int와 같은 자료형*함수사용 형식 : void *p = malloc(100); -&gt; 100바이트의 메모리를 할당하여 포인터 p에 저장함*void 포인터 = 만능 포인터 어떤 타입도 다 바꿀 수 있다. free 함수로 할당된 메모리 해체하기 free(p); -&gt; p가 가지고 있는 주소에 할당된 메모리를 해제함 malloc 함수를 사용하면 free 함수를 사용해야 한다. 반드시 지정된 시점에 만들어 없애야 한다. 그렇지 않으면 메모리를 많이 쓰게 되어 성능을 저하 시킨다. 그것을 데이터의 잔여물들 이라고 한다. malloc 함수를 사용하지 않으면 메모리가 부족하거나 낭비하며 사용할 수 있기 때문에 중요하다.**malloc 함수 사용과 free함수로 메모리 해체하기**malloc 함수 사용하여 입력받고 출력 malloc 함수는 메모리 할당 크기를 변수로 지정할 수 있다 메모리의 낭비를 막기 위해 동적 메모리 할당을 사용한다. 배열과 달리 malloc은 함수이기 때문에 할당할 크기를 적을 때 상수뿐만 아니라 변수도 사용할 수 있다.**동적 메모리 할당 사용하여 숫자 입력 받아 합산**동적 메모리 할당한 합산 값" }, { "title": "java 문법정리 2", "url": "/posts/java0621/", "categories": "java", "tags": "충북대 공동훈련센터, 실습수업, 개발자 과정", "date": "2022-06-07 16:34:00 +0800", "snippet": "자바 수업 내용 정리 배열 원소의 평균 구하기 배열의 length 필드를 이용하여 배열의 크기만큼 정수를 입력받고 평균을 구하는 프로그램이다. 평균 구하기 실행결과이다. 배열과 for-each문기존의 for문을 변형하여, 배열이나 나열의 크기만큼 루프를 돌면서 각 원소를 순차적으로 접근하는데 유용하게 만든것이다. for-each문을 활용하는 사례이다. 그에 따른 실행결과. 비정방형 배열의 생성과 접근비정방형 배열은 행마다 열의 개수가 서로 다른 배열을 말한다. 비정방형 배열의 생성과 접근 예제이다. 비정방형 배열을 만들어 값을 초기화하고 출력한다. 그에 따른 실행결과. 배열 리턴 정수 4개를 가지는 일차원 배열을 생성하고 1, 2, 3, 4로 초기화한 다음, 배열을 리턴하는 makeArray()를 작성하고, 이 메소드로 부터 배열을 전달 받아 값을 출력하는 프로그램이다. 그에 따른 실행결과. makeArray()가 종료해도 생성된 배열은 소멸되지 않는다. intArray()는 makeArray()가 리턴한 배열을 가리킴. Circle 클래스의 객체 생성 및 활용 반지름과 이름을 가진 Circle 클래스를 작성하고, Circle 클래스의 객체를 생성한 것이다. 그에 따른 실행결과. 생성자 생성자는 객체가 생성될 때 객체의 초기화를 위해 실행되는 메소드이다. 객체가 생성되는 순간에 자동으로 호출되는 메소드로서, 객체에 필요한 초기화를 실행하는 코드를 담아야한다. 두 개의 생성자를 가진 Circle 클래스 예제이다. 그에 따른 실행결과.*생성자의 특징 생성자의 이름은 클래스 이름과 동일해야 하며 리턴 타입이 없다. 매개변수의 개수와 타입만 다르다면, 클래스 내에 생성자를 여러 개 작성할 수 있다. new를 통해 객체를 생성할 때 한 번만 호출된다. 생성자의 목적은 객체가 생성될 때, 필요한 초기 작업을 위함이다. 생성자의 선언 및 활용해보기 제목과 저자를 나타내는 title과 author 필드를 가진 Book클래스를 작성하고, 생성자를 작성하여 필드를 초기화하는 예제이다. 그에 따른 실행결과. this()로 다른 생성자 호출this()는 클래스 내에서 생성자가 다른 생성자를 호출할 때 사용하는 자바코드이다. Book 클래스의 생성자를 this()를 이용하여 수정한 예제이다. 그에 따른 실행결과. 이렇게 구성하는 이유는 불필요한 코드를 최소화 하기 위해서다." } ]
